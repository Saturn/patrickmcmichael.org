{"data":{"site":{"siteMetadata":{"title":"patrickmcmichael.org","author":"Patrick McMichael"}},"markdownRemark":{"id":"a425cf09-3302-57a1-924a-488df3835843","excerpt":"If you are building a Flask application that includes user authentication you may have considered adding the ability for users to authenticate using a third…","html":"<p>If you are building a Flask application that includes user authentication you may have considered adding the ability for users to authenticate using a third party account such as Google, Facebook or Twitter.</p>\n<p>Before I get to the Flask app with OAuth2 authentication I want to quickly go over some OAuth 2 basics. If you wish to skip ahead to the example Flask app click <a href=\"#The%20Example%20Application\">here</a>.</p>\n<h3 id=\"oauth-2-and-openid-connect\"><a href=\"#oauth-2-and-openid-connect\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OAuth 2 and OpenID Connect</h3>\n<p><a href=\"https://oauth.net/2/\">OAuth 2</a> is a specification or standard which can enable applications to obtain (limited) access to data on another service such as Google, Facebook or Spotify for example. Services may authorize access to different levels of data ranging from basic account information all the way to wanting access to your emails (<a href=\"https://developers.google.com/gmail/api/guides/\">Gmail API</a>). Specifically, OAuth 2 is an authorization framework. It does not specify exactly how services should handle authentication.</p>\n<p><a href=\"https://openid.net/connect/\">OpenID Connect</a> is an identity layer built on top of OAuth 2. OpenID Connect is helpful because it defines some extra steps to the OAuth 2 flow which make federated authentication possible. One of the main steps is the returning of an <code class=\"language-text\">id_token</code> from the authorization server. This token is usually a JSON Web Token (<a href=\"https://jwt.io/\">JWT</a>) which serializes various data such as <code class=\"language-text\">iss</code> (issuer) and <code class=\"language-text\">iat</code> (issued at). They can include additional data. For example, Google’s id_tokens do include email addresses (assuming ‘email’ is part of the scope you specified when initiating the request).</p>\n<p>For our example application we will be using <a href=\"https://developers.google.com/identity/protocols/OpenIDConnect\">Google</a> as an authentication provider. Their implementation conforms to OpenID connect.</p>\n<h3 id=\"the-example-application\"><a href=\"#the-example-application\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Example Application</h3>\n<h4 id=\"getting-the-credentials\"><a href=\"#getting-the-credentials\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting the credentials</h4>\n<p>To be able to use Google as an authentication provider for our application we need to register an application in the Google developer console.</p>","frontmatter":{"title":"Signing in with a Google Account with your Flask application","date":"January 19, 2019"}}},"pageContext":{"slug":"/flask-google-login/","previous":{"fields":{"slug":"/hello/"},"frontmatter":{"title":"Hello"}},"next":null}}