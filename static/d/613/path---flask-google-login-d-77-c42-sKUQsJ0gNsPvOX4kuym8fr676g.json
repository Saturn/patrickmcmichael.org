{"data":{"site":{"siteMetadata":{"title":"patrickmcmichael.org","author":"Patrick McMichael"}},"markdownRemark":{"id":"a425cf09-3302-57a1-924a-488df3835843","excerpt":"If you are building a Flask application that includes user authentication you may have considered adding the ability for users to authenticate using a third…","html":"<p>If you are building a Flask application that includes user authentication you may have considered adding the ability for users to authenticate using a third party account such as Google, Facebook or Twitter. I will show an example Flask application which uses Google as an authentication provider. However, it will be very straightforward to add support for other providers too.</p>\n<p>Before I get to the Flask app I want to quickly go over some OAuth 2 basics. If you wish to skip ahead to the example Flask app click <a href=\"#the-example-application\">here</a>.</p>\n<h3 id=\"oauth-2-and-openid-connect\"><a href=\"#oauth-2-and-openid-connect\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OAuth 2 and OpenID Connect</h3>\n<p><a href=\"https://oauth.net/2/\">OAuth 2</a> is a specification or standard which can enable applications to obtain (limited) access to data on another service such as Google, Facebook or Spotify for example. Services may authorize access to different levels of data ranging from basic account information all the way to wanting access to your emails (<a href=\"https://developers.google.com/gmail/api/guides/\">Gmail API</a>). Specifically, OAuth 2 is an authorization framework. It does not specify exactly how services should handle authentication.</p>\n<p><a href=\"https://openid.net/connect/\">OpenID Connect</a> is an identity layer built on top of OAuth 2. OpenID Connect is helpful because it defines some extra steps to the OAuth 2 flow which make federated authentication possible. One of the main steps is the returning of an <code class=\"language-text\">id_token</code> from the authorization server. This token is usually a JSON Web Token (<a href=\"https://jwt.io/\">JWT</a>) which serializes various data such as <code class=\"language-text\">iss</code> (issuer) and <code class=\"language-text\">iat</code> (issued at). They can include additional data. For example, Google’s id_tokens do include email addresses (assuming ‘email’ is part of the scope you specified when initiating the request).</p>\n<p>For our example application we will be using <a href=\"https://developers.google.com/identity/protocols/OpenIDConnect\">Google</a> as an authentication provider. Their implementation conforms to OpenID connect.</p>\n<h3 id=\"the-example-application\"><a href=\"#the-example-application\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Example Application</h3>\n<h4 id=\"getting-the-credentials\"><a href=\"#getting-the-credentials\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting the credentials</h4>\n<ol>\n<li>\n<p>To be able to use Google as an authentication provider for our application we need to register an application in the <a href=\"https://console.developers.google.com/apis/credentials\">Google developer console</a>. Create a new ‘project’ for this.</p>\n</li>\n<li>\n<p>Select <em>Create credentials</em> and then <em>OAuth client id</em>. Choose <em>Web application</em> for <em>Application type</em>.</p>\n</li>\n<li>\n<p>Choose a <em>name</em> for the application and add <em><a href=\"http://localhost:5000/google/authorized\">http://localhost:5000/google/authorized</a></em> to the <em>Authorised redirect URIs</em> section. Click save and make a note of the Client Secret and Client ID displayed.</p>\n</li>\n</ol>\n<h4 id=\"install-dependencies\"><a href=\"#install-dependencies\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install dependencies</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip install flask flask-dance[sqla] flask-sqlalchemy blinker</code></pre></div>\n<h4 id=\"a\"><a href=\"#a\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>a</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\ntitle<span class=\"token punctuation\">:</span> Adding Google Authentication to your Flask Application\ndate<span class=\"token punctuation\">:</span> <span class=\"token string\">'2019-01-19'</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n\nIf you are building a Flask application that includes user authentication you may have considered adding the ability <span class=\"token keyword\">for</span> users to authenticate using a third party account such <span class=\"token keyword\">as</span> Google<span class=\"token punctuation\">,</span> Facebook <span class=\"token operator\">or</span> Twitter<span class=\"token punctuation\">.</span> I will show an example Flask application which uses Google <span class=\"token keyword\">as</span> an authentication provider<span class=\"token punctuation\">.</span> However<span class=\"token punctuation\">,</span> it will be very straightforward to add support <span class=\"token keyword\">for</span> other providers too<span class=\"token punctuation\">.</span>\n\nBefore I get to the Flask app I want to quickly go over some OAuth <span class=\"token number\">2</span> basics<span class=\"token punctuation\">.</span> If you wish to skip ahead to the example Flask app click <span class=\"token punctuation\">[</span>here<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token comment\">#the-example-application).</span>\n\n<span class=\"token comment\">### OAuth 2 and OpenID Connect</span>\n\n<span class=\"token punctuation\">[</span>OAuth <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>oauth<span class=\"token punctuation\">.</span>net<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> a specification <span class=\"token operator\">or</span> standard which can enable applications to obtain <span class=\"token punctuation\">(</span>limited<span class=\"token punctuation\">)</span> access to data on another service such <span class=\"token keyword\">as</span> Google<span class=\"token punctuation\">,</span> Facebook <span class=\"token operator\">or</span> Spotify <span class=\"token keyword\">for</span> example<span class=\"token punctuation\">.</span> Services may authorize access to different levels of data ranging <span class=\"token keyword\">from</span> basic account information <span class=\"token builtin\">all</span> the way to wanting access to your emails <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Gmail API<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>developers<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>gmail<span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>guides<span class=\"token operator\">/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> Specifically<span class=\"token punctuation\">,</span> OAuth <span class=\"token number\">2</span> <span class=\"token keyword\">is</span> an authorization framework<span class=\"token punctuation\">.</span> It does <span class=\"token operator\">not</span> specify exactly how services should handle authentication<span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">[</span>OpenID Connect<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>openid<span class=\"token punctuation\">.</span>net<span class=\"token operator\">/</span>connect<span class=\"token operator\">/</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> an identity layer built on top of OAuth <span class=\"token number\">2</span><span class=\"token punctuation\">.</span> OpenID Connect <span class=\"token keyword\">is</span> helpful because it defines some extra steps to the OAuth <span class=\"token number\">2</span> flow which make federated authentication possible<span class=\"token punctuation\">.</span> One of the main steps <span class=\"token keyword\">is</span> the returning of an `id_token` <span class=\"token keyword\">from</span> the authorization server<span class=\"token punctuation\">.</span> This token <span class=\"token keyword\">is</span> usually a JSON Web Token <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>JWT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>jwt<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> which serializes various data such <span class=\"token keyword\">as</span> `iss` <span class=\"token punctuation\">(</span>issuer<span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> `iat` <span class=\"token punctuation\">(</span>issued at<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> They can include additional data<span class=\"token punctuation\">.</span> For example<span class=\"token punctuation\">,</span> Google<span class=\"token string\">'s id_tokens do include email addresses (assuming '</span>email' <span class=\"token keyword\">is</span> part of the scope you specified when initiating the request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\n\n\nFor our example application we will be using <span class=\"token punctuation\">[</span>Google<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>developers<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>identity<span class=\"token operator\">/</span>protocols<span class=\"token operator\">/</span>OpenIDConnect<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> an authentication provider<span class=\"token punctuation\">.</span> Their implementation conforms to OpenID connect<span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">### The Example Application</span>\n\n<span class=\"token comment\">#### Getting the credentials</span>\n\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span> To be able to use Google <span class=\"token keyword\">as</span> an authentication provider <span class=\"token keyword\">for</span> our application we need to register an application <span class=\"token keyword\">in</span> the <span class=\"token punctuation\">[</span>Google developer console<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>console<span class=\"token punctuation\">.</span>developers<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>apis<span class=\"token operator\">/</span>credentials<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> Create a new <span class=\"token string\">'project'</span> <span class=\"token keyword\">for</span> this<span class=\"token punctuation\">.</span>\n\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span> Select <span class=\"token operator\">*</span>Create credentials<span class=\"token operator\">*</span> <span class=\"token operator\">and</span> then <span class=\"token operator\">*</span>OAuth client <span class=\"token builtin\">id</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span> Choose <span class=\"token operator\">*</span>Web application<span class=\"token operator\">*</span> <span class=\"token keyword\">for</span> <span class=\"token operator\">*</span>Application <span class=\"token builtin\">type</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span> Choose a <span class=\"token operator\">*</span>name<span class=\"token operator\">*</span> <span class=\"token keyword\">for</span> the application <span class=\"token operator\">and</span> add <span class=\"token operator\">*</span>http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>localhost<span class=\"token punctuation\">:</span><span class=\"token number\">5000</span><span class=\"token operator\">/</span>google<span class=\"token operator\">/</span>authorized<span class=\"token operator\">*</span> to the <span class=\"token operator\">*</span>Authorised redirect URIs<span class=\"token operator\">*</span> section<span class=\"token punctuation\">.</span> Click save <span class=\"token operator\">and</span> make a note of the Client Secret <span class=\"token operator\">and</span> Client ID displayed<span class=\"token punctuation\">.</span>\n\n\n<span class=\"token comment\">#### Install dependencies</span></code></pre></div>\n<p>$ pip install flask flask-dance[sqla] flask-sqlalchemy blinker</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### a\n\n```python\n---\ntitle: Adding Google Authentication to your Flask Application\ndate: &#39;2019-01-19&#39;\n---\n\nIf you are building a Flask application that includes user authentication you may have considered adding the ability for users to authenticate using a third party account such as Google, Facebook or Twitter. I will show an example Flask application which uses Google as an authentication provider. However, it will be very straightforward to add support for other providers too.\n\nBefore I get to the Flask app I want to quickly go over some OAuth 2 basics. If you wish to skip ahead to the example Flask app click [here](#the-example-application).\n\n### OAuth 2 and OpenID Connect\n\n[OAuth 2](https://oauth.net/2/) is a specification or standard which can enable applications to obtain (limited) access to data on another service such as Google, Facebook or Spotify for example. Services may authorize access to different levels of data ranging from basic account information all the way to wanting access to your emails ([Gmail API](https://developers.google.com/gmail/api/guides/)). Specifically, OAuth 2 is an authorization framework. It does not specify exactly how services should handle authentication.\n\n[OpenID Connect](https://openid.net/connect/) is an identity layer built on top of OAuth 2. OpenID Connect is helpful because it defines some extra steps to the OAuth 2 flow which make federated authentication possible. One of the main steps is the returning of an `id_token` from the authorization server. This token is usually a JSON Web Token ([JWT](https://jwt.io/)) which serializes various data such as `iss` (issuer) and `iat` (issued at). They can include additional data. For example, Google&#39;s id_tokens do include email addresses (assuming &#39;email&#39; is part of the scope you specified when initiating the request).\n\n\n\nFor our example application we will be using [Google](https://developers.google.com/identity/protocols/OpenIDConnect) as an authentication provider. Their implementation conforms to OpenID connect.\n\n### The Example Application\n\n#### Getting the credentials\n\n1. To be able to use Google as an authentication provider for our application we need to register an application in the [Google developer console](https://console.developers.google.com/apis/credentials). Create a new &#39;project&#39; for this.\n\n2. Select *Create credentials* and then *OAuth client id*. Choose *Web application* for *Application type*.\n\n3. Choose a *name* for the application and add *http://localhost:5000/google/authorized* to the *Authorised redirect URIs* section. Click save and make a note of the Client Secret and Client ID displayed.\n\n\n#### Install dependencies</code></pre></div>\n<p>$ pip install flask flask-dance[sqla] flask-sqlalchemy blinker</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### a\n\n```python\n---\ntitle: Adding Google Authentication to your Flask Application\ndate: &#39;2019-01-19&#39;\n---\n\nIf you are building a Flask application that includes user authentication you may have considered adding the ability for users to authenticate using a third party account such as Google, Facebook or Twitter. I will show an example Flask application which uses Google as an authentication provider. However, it will be very straightforward to add support for other providers too.\n\nBefore I get to the Flask app I want to quickly go over some OAuth 2 basics. If you wish to skip ahead to the example Flask app click [here](#the-example-application).\n\n### OAuth 2 and OpenID Connect\n\n[OAuth 2](https://oauth.net/2/) is a specification or standard which can enable applications to obtain (limited) access to data on another service such as Google, Facebook or Spotify for example. Services may authorize access to different levels of data ranging from basic account information all the way to wanting access to your emails ([Gmail API](https://developers.google.com/gmail/api/guides/)). Specifically, OAuth 2 is an authorization framework. It does not specify exactly how services should handle authentication.\n\n[OpenID Connect](https://openid.net/connect/) is an identity layer built on top of OAuth 2. OpenID Connect is helpful because it defines some extra steps to the OAuth 2 flow which make federated authentication possible. One of the main steps is the returning of an `id_token` from the authorization server. This token is usually a JSON Web Token ([JWT](https://jwt.io/)) which serializes various data such as `iss` (issuer) and `iat` (issued at). They can include additional data. For example, Google&#39;s id_tokens do include email addresses (assuming &#39;email&#39; is part of the scope you specified when initiating the request).\n\n\n\nFor our example application we will be using [Google](https://developers.google.com/identity/protocols/OpenIDConnect) as an authentication provider. Their implementation conforms to OpenID connect.\n\n### The Example Application\n\n#### Getting the credentials\n\n1. To be able to use Google as an authentication provider for our application we need to register an application in the [Google developer console](https://console.developers.google.com/apis/credentials). Create a new &#39;project&#39; for this.\n\n2. Select *Create credentials* and then *OAuth client id*. Choose *Web application* for *Application type*.\n\n3. Choose a *name* for the application and add *http://localhost:5000/google/authorized* to the *Authorised redirect URIs* section. Click save and make a note of the Client Secret and Client ID displayed.\n\n\n#### Install dependencies</code></pre></div>\n<p>$ pip install flask flask-dance[sqla] flask-sqlalchemy blinker</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### a\n\n```python</code></pre></div>","timeToRead":7,"frontmatter":{"title":"Adding Google Authentication to your Flask Application","date":"January 19, 2019"}}},"pageContext":{"slug":"/flask-google-login/"}}